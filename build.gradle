apply plugin: 'idea'


subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    //apply plugin: 'findbugs'
    apply plugin: 'project-report'

    idea {
        module {
            outputDir = file('build/idea')
            testSourceDirs += file('src/integTest/java')
            testSourceDirs += file('src/integTest/resources')
        }
        project {
            ipr {
                languageLevel = '1.8'
                vcs = 'Git'
            }
        }
    }


    task initProject(description: 'Initialize project with sub-projects') << { task ->
        def dir = task.project.projectDir.path
        new File(dir).mkdirs();
        if (!task.project.childProjects.isEmpty()) {
            println "${task.project.name} has subprojects, ignoring bootstrap .."
            return
        }

        task.project.sourceSets*.java.srcDirs*.each { it.mkdirs() }
        task.project.sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        // add project default files

        ['build.gradle': ["description 'todo:write description for $task.project.name'"],
         'README.md'   : ["# $task.project.name", "Write a short description for `$task.project.name`"],
         '.gitignore'  : ['*.iml', '*.ipr', '*.iws', 'build']
        ].each { f, lines ->
            def file = new File(dir, f)
            if (!file.exists()) {
                file.createNewFile()
                //update .gitignore with default ignored items
                file.withWriter('UTF-8') { w ->
                    lines.each {
                        w.write("$it\n")
                    }
                }
            }
        }

        // todo: create bit-bucket repo
        // todo: create git repo, add remote, add and commit default files

    }

    task initGit(description: 'create empty git repo for leaf project') << { task ->
        if (!task.project.childProjects.isEmpty()) {
            println "${task.project.name} has subprojects, ignoring bootstrap .."
            return
        }
        println "Creating git repo for ${task.project.name} in ${task.project.projectDir}"
    }
}
